/* *
if (PHP_VERSION_ID < 80300) { // Internal command PHP v. 8.3+
 *  @brief      Full program to check the exact JSON ERROR
 *  
 *  @param [in] $string JSON string
 *  @return     Return description
 *  
 *  @details    
 *      Testing with Valid JSON INPUT
 *@code      
 *      $json = '[{"user_id":13,"username":"stack"},{"user_id":14,"username":"over"}]';
 *      $output = json_validate($json);
 *      print_r($output);
 *@endcode
 *      Valid OUTPUT
@verbatim
 *      	Array
 *      	(
 *      		[0] => stdClass Object
 *      			(
 *      				[user_id] => 13
 *      				[username] => stack
 *      			)
 *      
 *      		[1] => stdClass Object
 *      			(
 *      				[user_id] => 14
 *      				[username] => over
 *      			)
 *      	)
@endverbatim
 *
 *  @details    
 *      Testing with invalid JSON
 *@code      
 *      	$json = '{background-color:yellow;color:#000;padding:10px;width:650px;}';
 *      	$output = json_validate($json);
 *      	print_r($output);
 *@endcode
 *
 *  @details    
 *      Invalid OUTPUT
 *      
 *      Syntax error, malformed JSON.
 *      
 *      Extra note for (PHP >= 5.2 && PHP < 5.3.0)
 *      
 *      Since json_last_error is not supported in PHP 5.2, you can check if the encoding or decoding returns boolean FALSE. Here is an example
 *@code     
 *      	// decode the JSON data
 *      	$result = json_decode($json);
 *      	if ($result === FALSE) {
 *      		// JSON is invalid
 *      	}
 *@endcode
 *
 *  @author		Madan Sapkota https://stackoverflow.com/users/782535/madan-sapkota
 *  @see       	https://stackoverflow.com/a/15198925/7485823
 *  @since     	2023-06-15T07:27:02 / Bruger
 */
/*
function json_validate($string, $associative = TRUE, $max_depth	= 512)
{
    // decode the JSON data
    $result = json_decode($string);
    //$result = json_decode($string, TRUE, 512, JSON_THROW_ON_ERROR);
    $result = json_decode($string, $associative, $max_depth);

    // switch and check possible JSON errors
    switch (json_last_error()) {
        case JSON_ERROR_NONE:
            $error = FALSE; // No error detected (JSON is valid // No error has occurred)
            break;
        case JSON_ERROR_DEPTH:
            //$error = 'The maximum stack depth [$max_depth] has been exceeded.';
            $error = json_last_error_msg() . " [$max_depth].";
            break;
/*
        case JSON_ERROR_STATE_MISMATCH:
            $error = 'Invalid or malformed JSON.';
            break;
        case JSON_ERROR_CTRL_CHAR:
            $error = 'Control character error, possibly incorrectly encoded.';
            break;
        case JSON_ERROR_SYNTAX:
            $error = 'Syntax error, malformed JSON.';
            break;
        // PHP >= 5.3.3
        case JSON_ERROR_UTF8:
            $error = 'Malformed UTF-8 characters, possibly incorrectly encoded.';
            break;
        // PHP >= 5.5.0
        case JSON_ERROR_RECURSION:
            $error = 'One or more recursive references in the value to be encoded.';
            break;
        // PHP >= 5.5.0
        case JSON_ERROR_INF_OR_NAN:
            $error = 'One or more NAN or INF values in the value to be encoded.';
            break;
        case JSON_ERROR_UNSUPPORTED_TYPE:
            $error = 'A value of a type that cannot be encoded was given.';
            break;
* /
        default:
            //$error = 'Unknown JSON error occured.';
            $error = json_last_error_msg();
            break;
    }
/*	
	if ( ! $error )
	{
		$json_new	= json_encode( $result );
		$string		= preg_replace( '/\s*\r\n\s* /', '', $string );
		$string		= preg_replace( '/"\s*:\s*"/', '":"', $string );
		if( 0 != strcmp( $string, $json_new) ) {
				$error	.= "Not matching. Doublet keys??"; // Doublet keys??
		}
		
		/* * /
		//print_r($result);
		print_r($string);
		file_put_contents("string-in.txt", $string);
		print "\n--\n";
		print_r($json_new);
		file_put_contents("string-out.txt", $json_new);
		print "\n--\n";
		/ * * /
		is_deeply ( $string, $json_new, "test") ;
	}
* /
	return( $error );
    if ($error !== '') {
        // throw the Exception or exit // or whatever :)
        exit($error);
    }

    // everything is OK
    return $result;
}	// json_validate()
}
*/
